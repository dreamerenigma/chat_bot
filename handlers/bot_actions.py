import logging
from aiogram import Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database.bots_database import delete_bot_from_db, get_bot_from_db, save_token_to_db, update_bot_in_db, update_bot_pic_in_db
from keyboards.inline_bot_options_keyboard import create_bot_action_keyboard
from states.bot_states import UserForm, BotForm
from utils.token_generator import generate_token

router = Router()

async def update_bot_message(callback: CallbackQuery, state: FSMContext, message=None):
    from handlers.user_handlers import choose_bots_command_handler

    data = await state.get_data()
    bot_name = data.get("bot_name")
    bot_username = data.get("bot_username")

    if not bot_name or not bot_username:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞.")
        return

    response_message = message or f"–í–æ—Ç: {bot_name} @{bot_username}.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –±–æ—Ç–æ–º?"
    keyboard = create_bot_action_keyboard()

    old_markup_str = str(callback.message.reply_markup).strip()
    new_markup_str = str(keyboard).strip()

    if callback.message.text.strip() == response_message.strip() and old_markup_str == new_markup_str:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")
        return

    try:
        await callback.message.edit_text(response_message, reply_markup=keyboard)
        await callback.answer()
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    if callback.data == "bot_action:back":
        await choose_bots_command_handler(callback.message, state)


async def handle_token_action(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_name = data.get("bot_name")
    bot_username = data.get("bot_username")
    bot_data = await get_bot_from_db(bot_username)
    bot_id = data.get("bot_id")

    if bot_data:
        bot_id = bot_data['bot_id']
        token = bot_data['token']
        token_message = (
            f"–í–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_name} @{bot_username}:\n\n"
            f"`{bot_id}:{token}`\n"
        )
    else:
        token_message = "Error: Bot data not found. Please check the bot username."

    buttons = [
        InlineKeyboardButton(text="–û—Ç–æ–∑–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω", callback_data=f"bot_action:revoke_token:{bot_id}:{bot_name}:{bot_username}"),
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back")
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[buttons[0]], [buttons[1]]])

    await callback.message.edit_text(token_message, reply_markup=keyboard, parse_mode="Markdown")


async def handle_edit_action(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_name = data.get("bot_name")
    bot_username = data.get("bot_username")
    bot_data = await get_bot_from_db(bot_username)

    if bot_data:
        about = bot_data.get("about", "üö´")
        description = bot_data.get("description", "üö´")
        description_picture = "üñº –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏" if bot_data.get("description_picture") else "üö´ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏"
        bot_pic = "üñº –µ—Å—Ç—å –±–æ—Ç–ø–∏–∫" if bot_data.get("botpic") else "üö´ –Ω–µ—Ç –±–æ—Ç–ø–∏–∫–∞"
        commands = bot_data.get("commands", "–Ω–µ—Ç –∫–æ–º–∞–Ω–¥")
        privacy_policy = bot_data.get("privacy_policy", "üö´")

        response_message = (
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å @{bot_username} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
            f"*–ò–º—è:* {bot_name}\n"
            f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* {about}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* {description_picture}\n"
            f"*–ë–æ—Ç–ø–∏–∫:* {bot_pic}\n"
            f"*–ö–æ–º–∞–Ω–¥—ã:* {commands}\n"
            f"*–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:* {privacy_policy}"
        )

        response_message = response_message.replace('.', '\\.')

        buttons = [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ò–º—è", callback_data="bot_action:change_name"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="bot_action:change_about"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="bot_action:change_description"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –û–ø–∏—Å–∞–Ω–∏–µ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="bot_action:change_description_picture"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ë–æ—Ç–ø–∏–∫", callback_data="bot_action:change_botpic"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ö–æ–º–∞–Ω–¥—ã", callback_data="bot_action:change_commands"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ü–æ–ª–∏—Ç–∏–∫—É –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="bot_action:change_privacy"),
            InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back"),
        ]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])

        await callback.message.edit_text(response_message, parse_mode="MarkdownV2", reply_markup=keyboard)
    else:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—Ç–µ.")


async def handle_delete_action(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_name = data.get("bot_name")
    bot_username = data.get("bot_username")

    buttons = [
        InlineKeyboardButton(text="–ù–µ—Ç, –Ω–µ–≤–∞–∂–Ω–æ.", callback_data="bot_action:nevermind"),
        InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", callback_data="bot_action:confirm_delete"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="bot_action:no"),
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [buttons[0]], [buttons[1]], [buttons[2]], [buttons[3]]
    ])

    await callback.message.edit_text(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ {bot_name} @{bot_username}. –≠—Ç–æ –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard
    )


async def handle_confirm_delete_action(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_name = data.get("bot_name")
    bot_username = data.get("bot_username")

    confirmation_message = (
        f"–í—ã –ü–û–õ–ù–û–°–¢–¨–Æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ {bot_name} @{bot_username} ?"
    )

    buttons = [
        InlineKeyboardButton(text="–ù–µ—Ç!", callback_data="bot_action:no"),
        InlineKeyboardButton(text="–î–∞, —è —É–≤–µ—Ä–µ–Ω –Ω–∞ 100%!", callback_data="bot_action:final_confirm_delete"),
        InlineKeyboardButton(text="–ß–µ—Ä—Ç –≤–æ–∑—å–º–∏, –Ω–µ—Ç!", callback_data="bot_action:hell_no"),
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [buttons[0]],
        [buttons[1]],
        [buttons[2]],
        [buttons[3]]
    ])

    await callback.message.edit_text(confirmation_message, reply_markup=keyboard)


async def handle_final_confirm_delete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_name = data.get("bot_name")
    bot_username = data.get("bot_username")

    deletion_successful = await delete_bot_from_db(bot_username)

    if deletion_successful:
        back_button = InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", callback_data="bot_action:back")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
        await callback.message.edit_text(f"–í—ã —É–¥–∞–ª–∏–ª–∏ {bot_name} @{bot_username}.", reply_markup=keyboard)
    else:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handle_revoke_token(callback: CallbackQuery):
    _, action, bot_id_str, bot_name, bot_username = callback.data.split(":")
    bot_id = int(bot_id_str)

    new_token = generate_token()

    if await save_token_to_db(bot_id, new_token):
        token_message = (
            f"–¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_name} @{bot_username} –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.\n"
            f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω:\n\n"
            f"`{bot_id}:{new_token}`\n"
        )
    else:
        token_message = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    buttons = [
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[buttons[0]]])

    await callback.message.edit_text(token_message, reply_markup=keyboard, parse_mode="Markdown")


async def handle_payments_action(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_name = data.get("bot_name")
    bot_username = data.get("bot_username")

    confirmation_message = (
        f"Payment providers for {bot_name} @{bot_username}."
    )

    buttons = [
        InlineKeyboardButton(text="üá∑üá∫ –°–±–µ—Ä–±–∞–Ω–∫ ¬ª", callback_data="bot_action:sber"),
        InlineKeyboardButton(text="üá∑üá∫ –ÆKassa ¬ª", callback_data="bot_action:youkassa"),
        InlineKeyboardButton(text="üá∑üá∫ PayMaster ¬ª", callback_data="bot_action:paymaster"),
        InlineKeyboardButton(text="üá∑üá∫ Bank 131 ¬ª", callback_data="bot_action:bank131"),
        InlineKeyboardButton(text="üá∑üá∫ Robokassa ¬ª", callback_data="bot_action:robokassa"),
        InlineKeyboardButton(text="üá∑üá∫ PayBox.money ¬ª", callback_data="bot_action:paybox"),
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [buttons[0]],
        [buttons[1]],
        [buttons[2]],
        [buttons[3]],
        [buttons[4]],
        [buttons[5]],
        [buttons[6]]
    ])

    await callback.message.edit_text(confirmation_message, reply_markup=keyboard)


async def handle_settings_action(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bot_username = data.get("bot_username")

    confirmation_message = (
        f"Settings for @{bot_username}."
    )

    buttons = [
        InlineKeyboardButton(text="–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="bot_action:inline_mode"),
        InlineKeyboardButton(text="–ë–∏–∑–Ω–µ—Å —Ä–µ–∂–∏–º", callback_data="bot_action:business_mode"),
        InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å –≥—Ä—É–ø–ø—ã?", callback_data="bot_action:allow_group"),
        InlineKeyboardButton(text="–ì—Ä—É–ø–ø–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="bot_action:group_privacy"),
        InlineKeyboardButton(text="–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã", callback_data="bot_action:group_admin_rights"),
        InlineKeyboardButton(text="–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞", callback_data="bot_action:channel_admin_rights"),
        InlineKeyboardButton(text="–ü–ª–∞—Ç–µ–∂–∏", callback_data="bot_action:payments"),
        InlineKeyboardButton(text="–î–æ–º–µ–Ω", callback_data="bot_action:domain"),
        InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é", callback_data="bot_action:menu_button"),
        InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="bot_action:configure_mini_app"),
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [buttons[0]],
        [buttons[1]],
        [buttons[2], buttons[3]],
        [buttons[4], buttons[5]],
        [buttons[6], buttons[7]],
        [buttons[7]],
        [buttons[8]],
        [buttons[9]],
        [buttons[10]]
    ])

    await callback.message.edit_text(confirmation_message, reply_markup=keyboard)


async def handle_ownership_action(callback: CallbackQuery):
    text_message = "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram."

    buttons = [
        InlineKeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data="bot_action:choose_recipient"),
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back")
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [buttons[0]],
        [buttons[1]]
    ])

    await callback.message.edit_text(text_message, reply_markup=keyboard)


async def choose_recipient_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –µ–≥–æ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –µ–≥–æ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await state.set_state(UserForm.waiting_for_username)


async def process_username(message: types.Message, state: FSMContext):
    try:
        logging.info(f"Received message: {message.text}")
        username = message.text.strip()

        current_user_username = f"@{message.from_user.username}" if message.from_user.username else None

        if len(username) == 0:
            await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        elif not username.startswith('@'):
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        elif not username[1:].isalnum() and not username[1:].replace('_', '').isalnum():
            await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª '_'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif username == current_user_username:
            await message.answer("–ü—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        elif username.lower().startswith("@bot") or "channel" in username.lower():
            await message.answer("–ü—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–∞–Ω–∞–ª—É –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –±–æ—Ç—É.")
        else:
            await message.answer("–£–ø—Å! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ.")
            await state.set_state(UserForm.confirmation_sent)
    except Exception as e:
        logging.error(f"Error in process_username: {e}")


async def handle_confirmation_sent(message: types.Message):
    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def choose_recipient_callback(callback: CallbackQuery, state: FSMContext):
    logging.info("choose_recipient_callback was called")
    await choose_recipient_action(callback, state)


async def change_bot_name(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–û–ö. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.")
    await callback.message.answer("–û–ö. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.")
    await state.set_state(UserForm.waiting_for_new_bot_name.state)


def create_return_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ë–æ—Ç—É", callback_data="bot_action:back"),
        InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –°–ø–∏—Å–∫—É –ë–æ—Ç–æ–≤", callback_data="bot_action:back_to_list")
    ]
    return InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])


async def process_new_bot_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    token = data.get("token")
    bot_username = data.get("bot_username")

    await update_bot_in_db(bot_username=bot_username, bot_name=new_name, token=token)
    await state.update_data(bot_name=new_name)

    keyboard = create_return_keyboard()

    await message.answer(f"–£—Å–ø–µ—à–Ω–æ! –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ. /help", reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "bot_action:back_to_list")
async def handle_back_to_list(callback: CallbackQuery):
    from handlers.user_handlers import choose_bots_command_handler
    message = callback.message
    await choose_bots_command_handler(message)
    await callback.answer()


async def change_bot_botpic(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–û–ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –±–æ—Ç–∞.")
    await callback.message.answer("–û–ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –±–æ—Ç–∞.")
    await state.set_state(BotForm.waiting_for_new_bot_pic.state)


async def process_new_bot_pic(message: types.Message, state: FSMContext):
    from bot import bot

    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return

    data = await state.get_data()
    bot_username = data.get("bot_username")

    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)

    file_path = file_info.file_path
    downloaded_file = await bot.download_file(file_path)

    bot_pic_path = f"/assets/images/bot_pic/{bot_username}.jpg"

    with open(bot_pic_path, 'wb') as new_file:
        new_file.write(downloaded_file.read())

    await update_bot_pic_in_db(bot_username=bot_username, bot_pic=bot_pic_path)
    await state.update_data(bot_pic=bot_pic_path)

    keyboard = create_return_keyboard()

    await message.answer(f"–£—Å–ø–µ—Ö! –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. /help", reply_markup=keyboard)